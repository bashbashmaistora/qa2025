{"name": "test_registration[data3]", "status": "failed", "statusDetails": {"message": "AssertionError: Test 'Weak Password' failed: Expected message 'Password is too weak. Use at least 8 characters, including letters and numbers', got 'Validation failed'.\nassert ('Password is too weak. Use at least 8 characters, including letters and numbers' in 'Validation failed' or False)\n +  where 'Validation failed' = <built-in method get of dict object at 0x707d868b6c40>('message', '')\n +    where <built-in method get of dict object at 0x707d868b6c40> = {'errors': {'password': 'Password must be between 6 and 20 characters'}, 'message': 'Validation failed', 'success': False, 'timestamp': '2025-05-16 18:25:41'}.get\n +  and   False = any(<generator object test_registration.<locals>.<genexpr> at 0x707d868b3440>)", "trace": "data = {'confirmEmail': 'user@example.com', 'description': 'Weak Password', 'email': 'user@example.com', 'expected_message': 'Password is too weak. Use at least 8 characters, including letters and numbers', ...}\n\n    @pytest.mark.parametrize(\"data\", test_data)\n    def test_registration(data):\n        payload = {\n            \"email\": data[\"email\"],\n            \"confirmEmail\": data[\"confirmEmail\"],\n            \"password\": data[\"password\"]\n        }\n        response = post_request(\"https://abc13514.sg-host.com/api.php\", payload)\n    \n        # Assert status code\n        assert response.status_code == data[\"expected_status\"], (\n            f\"Test '{data['description']}' failed: Expected status {data['expected_status']}, got {response.status_code}. Response: {response.text}\"\n        )\n    \n        # Assert expected message if present\n        if \"expected_message\" in data:\n            resp_json = response.json()\n>           assert data[\"expected_message\"] in resp_json.get(\"message\", \"\") or \\\n                   any(data[\"expected_message\"] in err for err in resp_json.get(\"errors\", {}).values()), (\n                f\"Test '{data['description']}' failed: Expected message '{data['expected_message']}', got '{resp_json.get('message', '')}'.\"\n            )\nE           AssertionError: Test 'Weak Password' failed: Expected message 'Password is too weak. Use at least 8 characters, including letters and numbers', got 'Validation failed'.\nE           assert ('Password is too weak. Use at least 8 characters, including letters and numbers' in 'Validation failed' or False)\nE            +  where 'Validation failed' = <built-in method get of dict object at 0x707d868b6c40>('message', '')\nE            +    where <built-in method get of dict object at 0x707d868b6c40> = {'errors': {'password': 'Password must be between 6 and 20 characters'}, 'message': 'Validation failed', 'success': False, 'timestamp': '2025-05-16 18:25:41'}.get\nE            +  and   False = any(<generator object test_registration.<locals>.<genexpr> at 0x707d868b3440>)\n\ntest_registration_data_driven.py:24: AssertionError"}, "parameters": [{"name": "data", "value": "{'description': 'Weak Password', 'email': 'user@example.com', 'confirmEmail': 'user@example.com', 'password': '12345', 'expected_status': 400, 'expected_message': 'Password is too weak. Use at least 8 characters, including letters and numbers'}"}], "start": 1747419941154, "stop": 1747419941184, "uuid": "683bbf94-8c4d-457b-abee-a8c83e3a828f", "historyId": "9f8092c79fc6915c09f444ef2ccdf743", "testCaseId": "42441ed84a770fed2606b456e39d939f", "fullName": "test_registration_data_driven#test_registration", "labels": [{"name": "suite", "value": "test_registration_data_driven"}, {"name": "host", "value": "codespaces-8e7423"}, {"name": "thread", "value": "36641-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_registration_data_driven"}]}