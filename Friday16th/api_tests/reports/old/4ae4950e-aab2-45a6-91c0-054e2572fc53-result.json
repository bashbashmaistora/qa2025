{"name": "test_registration[data9]", "status": "failed", "statusDetails": {"message": "AssertionError: Test 'SQL Injection Attempt' failed: Expected message 'Validation failed', got 'Validation failed' and errors ['Please enter a valid email address'].\nassert False\n +  where False = any(<generator object test_registration.<locals>.<genexpr> at 0x7b8010d0bd30>)", "trace": "data = {'confirmEmail': \"' OR 1=1; --\", 'description': 'SQL Injection Attempt', 'email': \"' OR 1=1; --\", 'expected_message': 'Validation failed', ...}\n\n    @pytest.mark.parametrize(\"data\", test_data)\n    def test_registration(data):\n        payload = {\n            \"email\": data[\"email\"],\n            \"confirmEmail\": data[\"confirmEmail\"],\n            \"password\": data[\"password\"]\n        }\n        response = post_request(\"https://abc13514.sg-host.com/api.php\", payload)\n    \n        # Assert status code\n        assert response.status_code == data[\"expected_status\"], (\n            f\"Test '{data['description']}' failed: Expected status {data['expected_status']}, got {response.status_code}. Response: {response.text}\"\n        )\n    \n        # Assert expected message if present\n        if \"expected_message\" in data:\n            resp_json = response.json()\n            actual_message = resp_json.get(\"message\", \"\")\n    \n            # Check for exact message match or presence of message in errors\n            if actual_message == \"Validation failed\":\n                error_messages = [msg for msg in resp_json.get(\"errors\", {}).values()]\n>               assert any(data[\"expected_message\"] in msg for msg in error_messages), (\n                    f\"Test '{data['description']}' failed: Expected message '{data['expected_message']}', got '{actual_message}' and errors {error_messages}.\"\n                )\nE               AssertionError: Test 'SQL Injection Attempt' failed: Expected message 'Validation failed', got 'Validation failed' and errors ['Please enter a valid email address'].\nE               assert False\nE                +  where False = any(<generator object test_registration.<locals>.<genexpr> at 0x7b8010d0bd30>)\n\ntest_registration_data_driven-v1.py:29: AssertionError"}, "parameters": [{"name": "data", "value": "{'description': 'SQL Injection Attempt', 'email': \"' OR 1=1; --\", 'confirmEmail': \"' OR 1=1; --\", 'password': 'Password123', 'expected_status': 400, 'expected_message': 'Validation failed'}"}], "start": 1747424514900, "stop": 1747424514927, "uuid": "cd363591-1b82-4c88-a582-8038eb21d883", "historyId": "7729e62c53463d670c88eb4d9a8289bd", "testCaseId": "f4483e1ec05339618cb96e4db8b746a7", "fullName": "test_registration_data_driven-v1#test_registration", "labels": [{"name": "suite", "value": "test_registration_data_driven-v1"}, {"name": "host", "value": "codespaces-8e7423"}, {"name": "thread", "value": "21228-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_registration_data_driven-v1"}]}