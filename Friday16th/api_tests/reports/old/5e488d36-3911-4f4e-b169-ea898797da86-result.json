{"name": "test_registration[data14]", "status": "failed", "statusDetails": {"message": "AssertionError: Test 'Exceeding Maximum Length' failed: Expected message 'Validation failed', got 'Validation failed' and errors ['Email must not exceed 25 characters', 'Password must be between 6 and 20 characters'].\nassert False\n +  where False = any(<generator object test_registration.<locals>.<genexpr> at 0x75106200edc0>)", "trace": "data = {'confirmEmail': 'aaaaaaaaaaaaaaaaaaaaaaaaaa@example.com', 'description': 'Exceeding Maximum Length', 'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaa@example.com', 'expected_message': 'Validation failed', ...}\n\n    @pytest.mark.parametrize(\"data\", test_data)\n    def test_registration(data):\n        payload = {\n            \"email\": data[\"email\"],\n            \"confirmEmail\": data[\"confirmEmail\"],\n            \"password\": data[\"password\"]\n        }\n        response = post_request(\"https://abc13514.sg-host.com/api.php\", payload)\n    \n        # Assert status code\n        assert response.status_code == data[\"expected_status\"], (\n            f\"Test '{data['description']}' failed: Expected status {data['expected_status']}, got {response.status_code}. Response: {response.text}\"\n        )\n    \n        # Assert expected message if present\n        if \"expected_message\" in data:\n            resp_json = response.json()\n            actual_message = resp_json.get(\"message\", \"\")\n    \n            # Check for exact message match or presence of message in errors\n            if actual_message == \"Validation failed\":\n                error_messages = [msg for msg in resp_json.get(\"errors\", {}).values()]\n>               assert any(data[\"expected_message\"] in msg for msg in error_messages), (\n                    f\"Test '{data['description']}' failed: Expected message '{data['expected_message']}', got '{actual_message}' and errors {error_messages}.\"\n                )\nE               AssertionError: Test 'Exceeding Maximum Length' failed: Expected message 'Validation failed', got 'Validation failed' and errors ['Email must not exceed 25 characters', 'Password must be between 6 and 20 characters'].\nE               assert False\nE                +  where False = any(<generator object test_registration.<locals>.<genexpr> at 0x75106200edc0>)\n\ntest_registration_data_driven.py:29: AssertionError"}, "parameters": [{"name": "data", "value": "{'description': 'Exceeding Maximum Length', 'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaa@example.com', 'confirmEmail': 'aaaaaaaaaaaaaaaaaaaaaaaaaa@example.com', 'password': 'AAAAAAAAAAAAAAAAAAAAA', 'expected_status': 400, 'expected_message': 'Validation failed'}"}], "start": 1747423482989, "stop": 1747423483026, "uuid": "dc482dec-89d0-4549-bb24-63704b3c0757", "historyId": "824aba5c2b97b333707a1eff1762c514", "testCaseId": "42441ed84a770fed2606b456e39d939f", "fullName": "test_registration_data_driven#test_registration", "labels": [{"name": "suite", "value": "test_registration_data_driven"}, {"name": "host", "value": "codespaces-8e7423"}, {"name": "thread", "value": "12293-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_registration_data_driven"}]}